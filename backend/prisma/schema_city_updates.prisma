// City-related schema updates

// Cities table to store information about municipalities
model cities {
  id                   Int                 @id @default(autoincrement())
  name                 String              @db.VarChar(100)
  state                String              @db.VarChar(50)
  country              String              @db.VarChar(100) @default("USA")
  address              String?             @db.VarChar(255)
  zip_code             String?             @db.VarChar(20)
  contact_email        String?             @db.VarChar(255)
  contact_phone        String?             @db.VarChar(50)
  logo_url             String?             @db.VarChar(255)
  website              String?             @db.VarChar(255)
  status               String              @default("Active") @db.VarChar(50) // 'Active', 'Inactive'
  created_at           DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?           @default(now()) @db.Timestamptz(6)
  
  // Relations
  city_users           city_users[]
  city_scales          city_scales[]
  city_permits         city_permits[]
  city_violations      city_violations[]
  city_weigh_tickets   city_weigh_tickets[]
}

// City users table for city staff authentication
model city_users {
  id                   String              @id @db.Uuid
  name                 String              @db.VarChar(255)
  email                String              @unique @db.VarChar(255)
  city_id              Int
  role                 String              @db.VarChar(50) // 'admin', 'operator', 'inspector', 'viewer'
  is_active            Boolean             @default(true)
  created_at           DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?           @default(now()) @db.Timestamptz(6)
  
  // Relations
  cities               cities              @relation(fields: [city_id], references: [id], onDelete: Cascade)
  city_permits         city_permits[]
  city_violations      city_violations[]
  city_weigh_tickets   city_weigh_tickets[]
}

// City scales table for scales owned by cities
model city_scales {
  id                   Int                 @id @default(autoincrement())
  name                 String              @db.VarChar(100)
  location             String?             @db.VarChar(255)
  latitude             Decimal?            @db.Decimal(10, 8)
  longitude            Decimal?            @db.Decimal(11, 8)
  scale_type           String              @db.VarChar(50) // 'fixed', 'portable', 'weigh_station'
  manufacturer         String?             @db.VarChar(100)
  model                String?             @db.VarChar(100)
  serial_number        String?             @db.VarChar(100)
  max_capacity         Decimal?            @db.Decimal(10, 2) // in pounds or kg
  precision            Decimal?            @db.Decimal(5, 2) // precision of the scale
  calibration_date     DateTime?           @db.Date
  next_calibration_date DateTime?          @db.Date
  status               String              @default("Active") @db.VarChar(50) // 'Active', 'Maintenance', 'Offline'
  city_id              Int
  created_at           DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?           @default(now()) @db.Timestamptz(6)
  
  // Relations
  cities               cities              @relation(fields: [city_id], references: [id], onDelete: Cascade)
  city_weigh_tickets   city_weigh_tickets[]
}

// City permits table for overweight/oversize permits
model city_permits {
  id                   Int                 @id @default(autoincrement())
  permit_number        String              @unique @db.VarChar(50)
  company_name         String              @db.VarChar(255)
  contact_name         String?             @db.VarChar(255)
  contact_email        String?             @db.VarChar(255)
  contact_phone        String?             @db.VarChar(50)
  vehicle_info         String              @db.VarChar(255) // License plate, VIN, etc.
  permit_type          String              @db.VarChar(50) // 'overweight', 'oversize', 'both'
  max_weight           Decimal?            @db.Decimal(10, 2) // Maximum allowed weight
  dimensions           Json?               @db.Json // For oversize permits
  start_date           DateTime            @db.Date
  end_date             DateTime            @db.Date
  fee_amount           Decimal             @db.Decimal(10, 2)
  payment_status       String              @default("Pending") @db.VarChar(50) // 'Pending', 'Paid', 'Refunded'
  status               String              @default("Active") @db.VarChar(50) // 'Active', 'Expired', 'Revoked'
  approved_by          String?             @db.Uuid
  city_id              Int
  created_at           DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?           @default(now()) @db.Timestamptz(6)
  
  // Relations
  cities               cities              @relation(fields: [city_id], references: [id], onDelete: Cascade)
  city_users           city_users?         @relation(fields: [approved_by], references: [id], onDelete: SetNull)
}

// City violations table for tracking violations
model city_violations {
  id                   Int                 @id @default(autoincrement())
  violation_number     String              @unique @db.VarChar(50)
  company_name         String?             @db.VarChar(255)
  vehicle_info         String              @db.VarChar(255) // License plate, VIN, etc.
  driver_name          String?             @db.VarChar(255)
  violation_type       String              @db.VarChar(50) // 'overweight', 'oversize', 'no_permit', 'expired_permit'
  violation_details    String?             @db.Text
  fine_amount          Decimal             @db.Decimal(10, 2)
  payment_status       String              @default("Pending") @db.VarChar(50) // 'Pending', 'Paid', 'Disputed'
  violation_date       DateTime            @db.Timestamptz(6)
  location             String?             @db.VarChar(255)
  issued_by            String?             @db.Uuid
  city_id              Int
  weigh_ticket_id      Int?
  created_at           DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?           @default(now()) @db.Timestamptz(6)
  
  // Relations
  cities               cities              @relation(fields: [city_id], references: [id], onDelete: Cascade)
  city_users           city_users?         @relation(fields: [issued_by], references: [id], onDelete: SetNull)
  city_weigh_tickets   city_weigh_tickets? @relation(fields: [weigh_ticket_id], references: [id], onDelete: SetNull)
}

// City weigh tickets table
model city_weigh_tickets {
  id                   Int                 @id @default(autoincrement())
  ticket_number        String              @unique @db.VarChar(50)
  vehicle_info         String              @db.VarChar(255) // License plate, VIN, etc.
  driver_name          String?             @db.VarChar(255)
  company_name         String?             @db.VarChar(255)
  gross_weight         Decimal             @db.Decimal(10, 2)
  tare_weight          Decimal?            @db.Decimal(10, 2)
  net_weight           Decimal?            @db.Decimal(10, 2)
  unit                 String              @default("lb") @db.VarChar(10)
  weigh_date           DateTime            @db.Timestamptz(6)
  scale_id             Int?
  city_id              Int
  recorded_by          String?             @db.Uuid
  permit_number        String?             @db.VarChar(50)
  status               String              @default("Compliant") @db.VarChar(50) // 'Compliant', 'Non-Compliant', 'Warning'
  notes                String?             @db.Text
  created_at           DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?           @default(now()) @db.Timestamptz(6)
  
  // Relations
  cities               cities              @relation(fields: [city_id], references: [id], onDelete: Cascade)
  city_scales          city_scales?        @relation(fields: [scale_id], references: [id], onDelete: SetNull)
  city_users           city_users?         @relation(fields: [recorded_by], references: [id], onDelete: SetNull)
  city_violations      city_violations[]
}
