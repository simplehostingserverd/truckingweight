
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Axle_configurationsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  axle_count: 'axle_count',
  configuration_type: 'configuration_type',
  is_specialized: 'is_specialized',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Axle_weightsScalarFieldEnum = {
  id: 'id',
  weigh_ticket_id: 'weigh_ticket_id',
  axle_position: 'axle_position',
  weight: 'weight',
  max_legal_weight: 'max_legal_weight',
  compliance_status: 'compliance_status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AxlesScalarFieldEnum = {
  id: 'id',
  configuration_id: 'configuration_id',
  position: 'position',
  max_legal_weight: 'max_legal_weight',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CargoScalarFieldEnum = {
  id: 'id',
  weigh_ticket_id: 'weigh_ticket_id',
  description: 'description',
  commodity_type: 'commodity_type',
  is_hazmat: 'is_hazmat',
  hazmat_class: 'hazmat_class',
  volume: 'volume',
  volume_unit: 'volume_unit',
  density: 'density',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CompaniesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  contact_email: 'contact_email',
  contact_phone: 'contact_phone',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Compliance_issuesScalarFieldEnum = {
  id: 'id',
  weigh_ticket_id: 'weigh_ticket_id',
  issue_type: 'issue_type',
  description: 'description',
  severity: 'severity',
  recommendation: 'recommendation',
  created_at: 'created_at'
};

exports.Prisma.DriversScalarFieldEnum = {
  id: 'id',
  name: 'name',
  license_number: 'license_number',
  license_expiry: 'license_expiry',
  phone: 'phone',
  email: 'email',
  status: 'status',
  company_id: 'company_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Load_optimizationsScalarFieldEnum = {
  id: 'id',
  weigh_ticket_id: 'weigh_ticket_id',
  original_distribution: 'original_distribution',
  suggested_distribution: 'suggested_distribution',
  expected_improvement: 'expected_improvement',
  explanation: 'explanation',
  applied: 'applied',
  created_at: 'created_at'
};

exports.Prisma.LoadsScalarFieldEnum = {
  id: 'id',
  description: 'description',
  origin: 'origin',
  destination: 'destination',
  weight: 'weight',
  vehicle_id: 'vehicle_id',
  driver_id: 'driver_id',
  status: 'status',
  company_id: 'company_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Predictive_alertsScalarFieldEnum = {
  id: 'id',
  vehicle_id: 'vehicle_id',
  driver_id: 'driver_id',
  alert_type: 'alert_type',
  risk_score: 'risk_score',
  description: 'description',
  recommendation: 'recommendation',
  acknowledged: 'acknowledged',
  acknowledged_by: 'acknowledged_by',
  acknowledged_at: 'acknowledged_at',
  created_at: 'created_at'
};

exports.Prisma.Scale_calibrationsScalarFieldEnum = {
  id: 'id',
  scale_id: 'scale_id',
  calibration_date: 'calibration_date',
  performed_by: 'performed_by',
  certificate_number: 'certificate_number',
  notes: 'notes',
  next_calibration_date: 'next_calibration_date',
  created_at: 'created_at'
};

exports.Prisma.Scale_facilitiesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  company_id: 'company_id',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Scale_readingsScalarFieldEnum = {
  id: 'id',
  scale_id: 'scale_id',
  reading_value: 'reading_value',
  reading_type: 'reading_type',
  timestamp: 'timestamp',
  is_anomaly: 'is_anomaly',
  confidence_score: 'confidence_score'
};

exports.Prisma.ScalesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  facility_id: 'facility_id',
  scale_type: 'scale_type',
  manufacturer: 'manufacturer',
  model: 'model',
  serial_number: 'serial_number',
  max_capacity: 'max_capacity',
  precision: 'precision',
  unit: 'unit',
  ip_address: 'ip_address',
  port: 'port',
  protocol: 'protocol',
  last_calibration_date: 'last_calibration_date',
  next_calibration_date: 'next_calibration_date',
  status: 'status',
  company_id: 'company_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Ticket_imagesScalarFieldEnum = {
  id: 'id',
  weigh_ticket_id: 'weigh_ticket_id',
  image_url: 'image_url',
  image_type: 'image_type',
  captured_by: 'captured_by',
  created_at: 'created_at'
};

exports.Prisma.Ticket_signaturesScalarFieldEnum = {
  id: 'id',
  weigh_ticket_id: 'weigh_ticket_id',
  signature_url: 'signature_url',
  name: 'name',
  role: 'role',
  ip_address: 'ip_address',
  created_at: 'created_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  company_id: 'company_id',
  is_admin: 'is_admin',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.VehiclesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  license_plate: 'license_plate',
  vin: 'vin',
  make: 'make',
  model: 'model',
  year: 'year',
  status: 'status',
  max_weight: 'max_weight',
  company_id: 'company_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  axle_configuration_id: 'axle_configuration_id',
  empty_weight: 'empty_weight',
  max_gross_weight: 'max_gross_weight',
  height: 'height',
  width: 'width',
  length: 'length',
  telematics_id: 'telematics_id',
  eld_integration: 'eld_integration',
  last_inspection_date: 'last_inspection_date'
};

exports.Prisma.Weigh_ticketsScalarFieldEnum = {
  id: 'id',
  ticket_number: 'ticket_number',
  vehicle_id: 'vehicle_id',
  driver_id: 'driver_id',
  scale_id: 'scale_id',
  facility_id: 'facility_id',
  gross_weight: 'gross_weight',
  tare_weight: 'tare_weight',
  net_weight: 'net_weight',
  unit: 'unit',
  date_time: 'date_time',
  status: 'status',
  compliance_status: 'compliance_status',
  capture_method: 'capture_method',
  latitude: 'latitude',
  longitude: 'longitude',
  notes: 'notes',
  company_id: 'company_id',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WeightsScalarFieldEnum = {
  id: 'id',
  vehicle_id: 'vehicle_id',
  weight: 'weight',
  date: 'date',
  time: 'time',
  driver_id: 'driver_id',
  status: 'status',
  company_id: 'company_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  axle_configurations: 'axle_configurations',
  axle_weights: 'axle_weights',
  axles: 'axles',
  cargo: 'cargo',
  companies: 'companies',
  compliance_issues: 'compliance_issues',
  drivers: 'drivers',
  load_optimizations: 'load_optimizations',
  loads: 'loads',
  predictive_alerts: 'predictive_alerts',
  scale_calibrations: 'scale_calibrations',
  scale_facilities: 'scale_facilities',
  scale_readings: 'scale_readings',
  scales: 'scales',
  ticket_images: 'ticket_images',
  ticket_signatures: 'ticket_signatures',
  users: 'users',
  vehicles: 'vehicles',
  weigh_tickets: 'weigh_tickets',
  weights: 'weights'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
